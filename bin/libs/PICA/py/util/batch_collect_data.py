import osimport rpydef get_accuracies(filepath):	#mi, cmi, cwmi	accuracies = {}	mi_accuracy = 0.0	cmi_accuracy = 0.0	cwmi_accuracy = 0.0	mi_balanced = {}	cmi_balanced = {}	cwmi_balanced = {}	MI = 2	CMI = 3	CWMI = 4	data = open(filepath).readlines()	classes = {}	grand_total = 0	for line in data[1:]:		fields = line.split("\t")		if len(fields) > 1:			real_class = fields[1]			grand_total += 1			classes[real_class] = 1			classes[fields[MI]] = 1			classes[fields[CMI]] = 1			classes[fields[CWMI]] = 1			if not mi_balanced.has_key(real_class):				mi_balanced[real_class] = [0,0]			if not cmi_balanced.has_key(real_class):				cmi_balanced[real_class] = [0,0]			if not cwmi_balanced.has_key(real_class):				cwmi_balanced[real_class] = [0,0]									if fields[MI] == real_class:				mi_accuracy += 1				mi_balanced[real_class][1] += 1			else:				mi_balanced[real_class][0] += 1							if fields[CMI] == real_class:				cmi_accuracy += 1				cmi_balanced[real_class][1] += 1			else:				cmi_balanced[real_class][0] += 1							if fields[CWMI] == real_class:				cwmi_accuracy += 1				cwmi_balanced[real_class][1] += 1			else:				cwmi_balanced[real_class][0] += 1	mi_accuracy = float(mi_accuracy)/grand_total	cmi_accuracy = float(cmi_accuracy)/grand_total	cwmi_accuracy = float(cwmi_accuracy)/grand_total	mi_bal = 0.0	cmi_bal = 0.0	cwmi_bal = 0.0	len_classes = len(classes.keys())	for key in mi_balanced.keys():		correct = mi_balanced[key][1]		incorrect = mi_balanced[key][0]		if correct > 0:			mi_bal += float(correct)/(correct+incorrect)	mi_bal = float(mi_bal)/len_classes	for key in cmi_balanced.keys():		correct = cmi_balanced[key][1]		incorrect = cmi_balanced[key][0]		if correct > 0:			cmi_bal += float(correct)/(correct+incorrect)	cmi_bal = float(cmi_bal)/len_classes	for key in cwmi_balanced.keys():		correct = cwmi_balanced[key][1]		incorrect = cwmi_balanced[key][0]		if correct > 0:			cwmi_bal += float(correct)/(correct+incorrect)	cwmi_bal = float(cwmi_bal)/len_classes	accuracies = {"mi_raw":mi_accuracy,"cwmi_raw":cwmi_accuracy,"cmi_raw":cmi_accuracy,				"mi_balanced":mi_bal,"cwmi_balanced":cwmi_bal,"cmi_balanced":cmi_bal}	return accuraciesdef calculate_paired_t_test(filepath):	results = {"cwmi"=0,"mi"=0,"p"=0}	cwmi = 0.0	mi = 0.0		return results	for root, dirs, filenames in os.walk("."):	for filename in filenames:		if filename.endswith(".classification.log"):			filepath = "%(root)s/%(filename)s"%(locals())			filename_parts = filename.split(".")			r = int(filename_parts[-4])			v = int(filename_parts[2][1:])						out_filename = "%s.summary"%(".".join(filename_parts[:-2]))						a = get_accuracies(filepath)			if not os.path.exists(out_filename):				fout = open(out_filename,"w")				fout.write("r\tv\tMI balanced\tCWMI balanced\tCMI balanced\tMI raw\tCWMI raw\tCMI raw\n")			else:				fout.open(out_filename,"a")			fout.write("%d\t%d\t%f\t%f\t%f\t%f\t%f\t%f\n"%(r,v,a["mi_balanced"],a["cwmi_balanced"],a["cmi_balanced"],a["mi_raw"],a["cwmi_raw"],a["cmi_raw"]))			fout.close()"""Calculate pairwise t-test MI balanced versus CWMI balanced significance and averages"""fout = open("summary_paired_ttest.txt","w")fout.write("phenotype\tfeatures per class\tconfounder\tmean_cwmi\tmean_mi\tp-value (2tailed)\n")for root, dirs, filenames in os.walk("."):	for filename in filenames:		if filename.endswith(".summary"):			filepath = "%(root)s/%(filename)s"%(locals())			filename_parts = filename.split(".")			p = filename_parts[0]			c = filename_parts[1]			n = int(filename_parts[3][1])			r = calculate_paired_t_tests(filepath)			fout.write("%s\t%d\t%s\t%f\t%f\t%f\n"%(p,n,c,r["cwmi"],r["mi"],r["p"]))			